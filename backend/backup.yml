openapi: 3.0.3

info:
  title: Website API View
  version: 0.0.0
  description: A Simple website to learn about DRF
paths:
  /Restaurant-api/Restaurant-Comment-Detail/{id}/:
    get:
      operationId: Restaurant_api_Restaurant_Comment_Detail_retrieve
      description: "\n        You can use this to get specific restaurant comment\
        \ data\n        可以透過這個API獲得特定一則的餐廳評論\n        "
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Restaurant-api
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantComment'
              examples:
                SuccessfulResponse:
                  value:
                    id: 4
                    RestaurantName: 阿鸞手工法國麵包
                    Rating: 2
                    Title: 超讚好吃手工麵包
                    Body: 超讚，根本這一生中沒吃過這樣好吃的東西，彷彿要神蹟降臨。
                    user_pk: 6
                    Restaurant: 12
                  summary: Successful Response
                  description: "\n                        Sample response for the\
                    \ restaurant comment get verb  .\n                        一個可以簡單用這個restaurant\
                    \ comment API做get行為的格式，藉此取得特定餐廳留言的評分跟評論。\n                   \
                    \     "
          description: ''
    post:
      operationId: Restaurant_api_Restaurant_Comment_Detail_create
      description: "\n        You can use this to post comment of any restaurant \n\
        \        可以透過這個API去張貼對任何一間的餐廳評論\n        "
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Restaurant-api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantComment'
            examples:
              SuccessfulResponse:
                value:
                  id: 4
                  RestaurantName: 阿鸞手工法國麵包
                  Rating: 2
                  Title: 超讚好吃手工麵包
                  Body: 超讚，根本這一生中沒吃過這樣好吃的東西，彷彿要神蹟降臨。
                  user_pk: 6
                  Restaurant: 12
                summary: Successful Response
                description: "\n                        Sample response for the restaurant\
                  \ comment post verb .\n                        一個可以簡單用這個restaurant\
                  \ comment API做 post 行為的格式，藉此對特定餐廳提出評分跟評論。\n                    \
                  \    "
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RestaurantComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RestaurantComment'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantComment'
              examples:
                SuccessfulResponse:
                  value:
                    id: 4
                    RestaurantName: 阿鸞手工法國麵包
                    Rating: 2
                    Title: 超讚好吃手工麵包
                    Body: 超讚，根本這一生中沒吃過這樣好吃的東西，彷彿要神蹟降臨。
                    user_pk: 6
                    Restaurant: 12
                  summary: Successful Response
                  description: "\n                        Sample response for the\
                    \ restaurant comment post verb .\n                        一個可以簡單用這個restaurant\
                    \ comment API做 post 行為的格式，藉此對特定餐廳提出評分跟評論。\n                  \
                    \      "
          description: ''
    put:
      operationId: Restaurant_api_Restaurant_Comment_Detail_update
      description: "\n        You can use this to edit specific restaurant comment\
        \ data, but need to update whole data in the same time/\n        可以透過這個API變更特定一的餐廳評論描述，但每次變更資料時都要上傳全部的欄位，不能擇一上傳。\n\
        \        "
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Restaurant-api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantComment'
            examples:
              SuccessfulResponse:
                value:
                  id: 4
                  RestaurantName: 阿鸞手工法國麵包
                  Rating: 8
                  Title: 超讚的啦好吃手工麵包
                  Body: 根本超讚(打完再打一次) 超讚，根本這一生中沒吃過這樣好吃的東西，彷彿要神蹟降臨。
                  user_pk: 6
                  Restaurant: 12
                summary: Successful Response
                description: "\n                        Sample response for the restaurant\
                  \ comment Put verb  .\n                        一個可以簡單用這個restaurant\
                  \ comment API做put行為的格式，藉此更新修正特定餐廳留言的評分跟評論，但記得要填寫所有欄位才能順利更新。\n  \
                  \                      "
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RestaurantComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RestaurantComment'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantComment'
              examples:
                SuccessfulResponse:
                  value:
                    id: 4
                    RestaurantName: 阿鸞手工法國麵包
                    Rating: 8
                    Title: 超讚的啦好吃手工麵包
                    Body: 根本超讚(打完再打一次) 超讚，根本這一生中沒吃過這樣好吃的東西，彷彿要神蹟降臨。
                    user_pk: 6
                    Restaurant: 12
                  summary: Successful Response
                  description: "\n                        Sample response for the\
                    \ restaurant comment Put verb  .\n                        一個可以簡單用這個restaurant\
                    \ comment API做put行為的格式，藉此更新修正特定餐廳留言的評分跟評論，但記得要填寫所有欄位才能順利更新。\n\
                    \                        "
          description: ''
    patch:
      operationId: Restaurant_api_Restaurant_Comment_Detail_partial_update
      description: "\n        You can use this to edit specific restaurant comment\
        \ data, can submit any single data each time/\n        可以透過這個API變更特定一則的餐廳評論描述，每次上傳只要傳送一個欄位即可。\n\
        \        "
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Restaurant-api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRestaurantComment'
            examples:
              SuccessfulResponse:
                value:
                  id: 4
                  RestaurantName: 阿鸞手工法國麵包
                  Body: 超讚的啦，根本這一生中沒吃過這樣好吃的東西，彷彿要神蹟降臨。 就算要更新貼文還是要留言
                  user_pk: 6
                  Restaurant: 12
                summary: Successful Response
                description: "\n                        Sample response for the restaurant\
                  \ comment Patch verb  .\n                        一個可以簡單用這個restaurant\
                  \ comment API做Patch行為的格式，藉此更新特定餐廳留言的評分跟評論。可以填入任意的一個欄位就送出，就可以更新。\n\
                  \                        "
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRestaurantComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRestaurantComment'
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantComment'
              examples:
                SuccessfulResponse:
                  value:
                    id: 4
                    RestaurantName: 阿鸞手工法國麵包
                    Body: 超讚的啦，根本這一生中沒吃過這樣好吃的東西，彷彿要神蹟降臨。 就算要更新貼文還是要留言
                    user_pk: 6
                    Restaurant: 12
                  summary: Successful Response
                  description: "\n                        Sample response for the\
                    \ restaurant comment Patch verb  .\n                        一個可以簡單用這個restaurant\
                    \ comment API做Patch行為的格式，藉此更新特定餐廳留言的評分跟評論。可以填入任意的一個欄位就送出，就可以更新。\n\
                    \                        "
          description: ''
    delete:
      operationId: Restaurant_api_Restaurant_Comment_Detail_destroy
      description: "\n        You can use this to delete specific restaurant comment\
        \ data,be careful and make sure the data you want to delete before you call\
        \ this api./\n        可以透過這個API刪除一則餐廳評論的資料，因為是刪除請確認好你要刪除這筆資料再來使用這個刪除功能。\n\
        \        "
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Restaurant-api
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantComment'
              examples:
                SuccessfulResponse:
                  value:
                    id: 4
                    RestaurantName: 阿鸞手工法國麵包
                    Rating: 2
                    Title: 超讚好吃手工麵包
                    Body: 超讚，根本這一生中沒吃過這樣好吃的東西，彷彿要神蹟降臨。
                    user_pk: 6
                    Restaurant: 12
                  summary: Successful Response
                  description: "\n                        Sample response for the\
                    \ restaurant comment Delete verb  . Make sure you want to delete\
                    \ the data before you use this verb\n                        一個可以簡單用這個restaurant\
                    \ comment API做delete行為的格式，請確定你真的要刪除檔案再進行動作。\n                \
                    \        "
          description: ''
  /Restaurant-api/Restaurant-Comment-List:
    get:
      operationId: Restaurant_api_Restaurant_Comment_List_list
      description: "\n        You can use this API to get whole restaurant comment\
        \ data inside database/\n        你將可以使用此API來獲取資料庫中的全部的餐廳評論列表。\n        "
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - Restaurant-api
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRestaurantCommentList'
              examples:
                SuccessfulResponse:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?offset=400&limit=100
                    previous: http://api.example.org/accounts/?offset=200&limit=100
                    results:
                    - - id: 1
                        RestaurantName: Sanji Teahouse 三季
                        Rating: 8
                        Title: 超好吃的啦!
                        Body: 第一次嘗試就覺得快瘋掉了~
                        user_pk: 5
                        Restaurant: 2
                      - id: 6
                        RestaurantName: Chandu 讚都
                        Rating: 10
                        Title: 讚都好好吃啊
                        Body: 台北必吃的印尼小吃
                        user_pk: 2
                        Restaurant: 6
                      - id: 4
                        RestaurantName: 阿鸞手工法國麵包
                        Rating: 2
                        Title: 超讚
                        Body: 超讚
                        user_pk: 6
                        Restaurant: 12
                  summary: Successful Response
                  description: Sample response for the restaurants list endpoint.
          description: ''
  /Restaurant-api/Restaurant-Detail/{id}/:
    get:
      operationId: Restaurant_api_Restaurant_Detail_retrieve
      description: "\n        You can use this to get specific restaurant data\n \
        \       可以透過這個API獲得特定一間的餐廳描述\n        "
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Restaurant-api
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
              examples:
                SucessfulResponse:
                  value:
                    id: 2
                    Name: Sanji Teahouse 三季
                    Country: 緬甸
                    Price: 250
                    Rating: 8
                    People: 4
                    Address: 235新北市中和區興南路二段22-1號
                    Introduction: 烤餅甜點都超級讚，一個瘋狂讓人想吃東西的店面，裝飾擺設都很明亮，值得再訪。
                    Picture: http://127.0.0.1:8000/media/Restaurant/%E4%B8%8B%E8%BC%89.jpg
                  summary: Sucessful Response
                  description: get verb in Restaurant-detail api, use this to get
                    specific restaurant data.
          description: ''
    post:
      operationId: Restaurant_api_Restaurant_Detail_create
      description: "\n        You can use this to post specific restaurant data\n\
        \        可以透過這個API去張貼一間的餐廳描述\n        "
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Restaurant-api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restaurant'
            examples:
              SuccessfulResponse:
                value:
                  Name: 三季Sanji
                  Country: 緬甸/Myanmar
                  Price: 580
                  Rating: 8
                  People: 8
                  Address: 235新北市中和區興南路二段22-1號
                  Introduction: 一個夭壽讚的餐廳啦~
                  Picture: https://lh3.googleusercontent.com/p/AF1QipMEb5DjVHsSfO7OHNEn_WozwL_QwEiD_PZ40E28=s680-w680-h510
                summary: Successful Response
                description: "\n                Sample response for the restaurant\
                  \ post .\n                一個可以簡單用這個restaurant API做 post 行為的格式\n\
                  \                "
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Restaurant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Restaurant'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
              examples:
                SuccessfulResponse:
                  value:
                    Name: 三季Sanji
                    Country: 緬甸/Myanmar
                    Price: 580
                    Rating: 8
                    People: 8
                    Address: 235新北市中和區興南路二段22-1號
                    Introduction: 一個夭壽讚的餐廳啦~
                    Picture: https://lh3.googleusercontent.com/p/AF1QipMEb5DjVHsSfO7OHNEn_WozwL_QwEiD_PZ40E28=s680-w680-h510
                  summary: Successful Response
                  description: "\n                Sample response for the restaurant\
                    \ post .\n                一個可以簡單用這個restaurant API做 post 行為的格式\n\
                    \                "
          description: ''
    put:
      operationId: Restaurant_api_Restaurant_Detail_update
      description: "\n        You can use this to edit specific restaurant data, but\
        \ need to update whole data in the same time/\n        可以透過這個API變更特定一間的餐廳描述，但每次變更資料時都要上傳全部的欄位。\n\
        \        "
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Restaurant-api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restaurant'
            examples:
              SuccessfulResponse:
                value:
                  id: 2
                  Name: Sanji Teahouse 三季
                  Country: 緬甸
                  Price: 5000
                  Rating: 1
                  People: 50
                  Address: 235新北市中和區興南路二段22-1號
                  Introduction: 烤餅甜點都超~~~~~超~~~~超~~~~級讚，一個瘋狂讓人想吃東西的店面，裝飾擺設都很明亮，值得再訪。
                  Picture: http://127.0.0.1:8000/media/Restaurant/%E4%B8%8B%E8%BC%89.jpg
                summary: Successful Response
                description: Put verb in Restaurant-detail api,u se this to edit the
                  data.Don't forget to fill in all the form don't miss anything or
                  this verb will be fail.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Restaurant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Restaurant'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
              examples:
                SuccessfulResponse:
                  value:
                    id: 2
                    Name: Sanji Teahouse 三季
                    Country: 緬甸
                    Price: 5000
                    Rating: 1
                    People: 50
                    Address: 235新北市中和區興南路二段22-1號
                    Introduction: 烤餅甜點都超~~~~~超~~~~超~~~~級讚，一個瘋狂讓人想吃東西的店面，裝飾擺設都很明亮，值得再訪。
                    Picture: http://127.0.0.1:8000/media/Restaurant/%E4%B8%8B%E8%BC%89.jpg
                  summary: Successful Response
                  description: Put verb in Restaurant-detail api,u se this to edit
                    the data.Don't forget to fill in all the form don't miss anything
                    or this verb will be fail.
          description: ''
    patch:
      operationId: Restaurant_api_Restaurant_Detail_partial_update
      description: "\n        You can use this to edit specific restaurant data, can\
        \ submit any single data each time/\n        可以透過這個API變更特定一間的餐廳描述，每次上傳只要傳送一個欄位即可。\n\
        \        "
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Restaurant-api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRestaurant'
            examples:
              SuccessfulResponse:
                value:
                  id: 2
                  Name: Sanji Teahouse 三季
                  Country: 緬甸
                  Price: 5000
                summary: Successful Response
                description: Patch verb in Restaurant-detail api, use this to edit
                  specific restaurant detail data.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRestaurant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRestaurant'
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
              examples:
                SuccessfulResponse:
                  value:
                    id: 2
                    Name: Sanji Teahouse 三季
                    Country: 緬甸
                    Price: 5000
                  summary: Successful Response
                  description: Patch verb in Restaurant-detail api, use this to edit
                    specific restaurant detail data.
          description: ''
    delete:
      operationId: Restaurant_api_Restaurant_Detail_destroy
      description: "\n        You can use this to delete specific restaurant data,be\
        \ careful and make sure the data you want to delete before you call this api./\n\
        \        可以透過這個API刪除一間餐廳的資料，因為是刪除請確認好你要刪除這筆資料再來使用這個刪除功能。\n        "
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Restaurant-api
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
              examples:
                SuccessfulResponse:
                  value:
                    id: 2
                    Name: Sanji Teahouse 三季
                    Country: 緬甸
                    Price: 5000
                    Rating: 8
                    People: 4
                    Address: 235新北市中和區興南路二段22-1號
                    Introduction: 烤餅甜點都超級讚，一個瘋狂讓人想吃東西的店面，裝飾擺設都很明亮，值得再訪。
                    Picture: http://127.0.0.1:8000/media/Restaurant/%E4%B8%8B%E8%BC%89.jpg
                  summary: Successful Response
                  description: Delete verb in Restaurant-detail api. make sure you
                    want delete the data before you use this verb.
          description: ''
  /Restaurant-api/Restaurant-List:
    get:
      operationId: Restaurant_api_Restaurant_List_list
      description: "\n        You can use this API to get whole restaurant data inside\
        \ database/\n        你將可以使用此API來獲取資料庫中的全部餐廳列表。\n        "
      parameters:
      - in: query
        name: Introduction_contains
        schema:
          type: string
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: max_people
        schema:
          type: integer
      - in: query
        name: max_price
        schema:
          type: integer
      - in: query
        name: max_rating
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - Restaurant-api
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRestaurantList'
              examples:
                SuccessfulResponse:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?offset=400&limit=100
                    previous: http://api.example.org/accounts/?offset=200&limit=100
                    results:
                    - - id: 5
                        Name: 池先生Kopitiam | 士林店
                        Country: 馬來西亞
                        Price: 250
                        Rating: 8
                        People: 3
                        Address: 111031台北市士林區福華路150號
                        Introduction: "離捷運站很近，總是有滿滿的香味傳出，麵包咖哩或是椰香飯都讓人喜悅。\r\n超開心的一間聚餐餐廳。"
                        Picture: http://127.0.0.1:8000/media/Restaurant/Kopitam.jpg
                      - id: 6
                        Name: Chandu 讚都
                        Country: 印尼
                        Price: 200
                        Rating: 9
                        People: 2
                        Address: 106台北市大安區市民大道三段128巷6號1樓
                        Introduction: 風味跟特色極佳的印尼餐廳，位於光華商場後方，逛累了就來這邊吃，特色小吃讚到不行
                        Picture: http://127.0.0.1:8000/media/Restaurant/Chandu.jpg
                  summary: Successful Response
                  description: Sample response for the restaurants list endpoint.
          description: ''
  /Settlement-api/Detail/{id}/:
    get:
      operationId: Settlement_api_Detail_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Settlement-api
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settlement'
          description: ''
    post:
      operationId: Settlement_api_Detail_create
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Settlement-api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settlement'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Settlement'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Settlement'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settlement'
          description: ''
    put:
      operationId: Settlement_api_Detail_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Settlement-api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settlement'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Settlement'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Settlement'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settlement'
          description: ''
    patch:
      operationId: Settlement_api_Detail_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Settlement-api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSettlement'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSettlement'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSettlement'
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settlement'
          description: ''
    delete:
      operationId: Settlement_api_Detail_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Settlement-api
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /Settlement-api/List:
    get:
      operationId: Settlement_api_List_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - Settlement-api
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSettlementList'
          description: ''
  /Settlement-api/Reply-Detail/{id}/:
    get:
      operationId: Settlement_api_Reply_Detail_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Settlement-api
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
          description: ''
    post:
      operationId: Settlement_api_Reply_Detail_create
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Settlement-api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reply'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Reply'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Reply'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
          description: ''
    put:
      operationId: Settlement_api_Reply_Detail_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Settlement-api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reply'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Reply'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Reply'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
          description: ''
    patch:
      operationId: Settlement_api_Reply_Detail_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Settlement-api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReply'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReply'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedReply'
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
          description: ''
    delete:
      operationId: Settlement_api_Reply_Detail_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Settlement-api
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /Settlement-api/Reply-List:
    get:
      operationId: Settlement_api_Reply_List_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - Settlement-api
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReplyList'
          description: ''
  /api-jwt/token/:
    post:
      operationId: api_jwt_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api-jwt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api-jwt/token/refresh/:
    post:
      operationId: api_jwt_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api-jwt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /dj-rest-auth/facebook/:
    post:
      operationId: dj_rest_auth_facebook_create
      description: |-
        class used for social authentications
        example usage for facebook with access_token
        -------------
        from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter

        class FacebookLogin(SocialLoginView):
            adapter_class = FacebookOAuth2Adapter
        -------------

        example usage for facebook with code

        -------------
        from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter
        from allauth.socialaccount.providers.oauth2.client import OAuth2Client

        class FacebookLogin(SocialLoginView):
            adapter_class = FacebookOAuth2Adapter
            client_class = OAuth2Client
            callback_url = 'localhost:8000'
        -------------
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SocialLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SocialLogin'
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialLogin'
          description: ''
  /dj-rest-auth/google/:
    post:
      operationId: dj_rest_auth_google_create
      description: |-
        class used for social authentications
        example usage for facebook with access_token
        -------------
        from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter

        class FacebookLogin(SocialLoginView):
            adapter_class = FacebookOAuth2Adapter
        -------------

        example usage for facebook with code

        -------------
        from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter
        from allauth.socialaccount.providers.oauth2.client import OAuth2Client

        class FacebookLogin(SocialLoginView):
            adapter_class = FacebookOAuth2Adapter
            client_class = OAuth2Client
            callback_url = 'localhost:8000'
        -------------
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SocialLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SocialLogin'
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialLogin'
          description: ''
  /dj-rest-auth/login/:
    post:
      operationId: dj_rest_auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /dj-rest-auth/logout/:
    post:
      operationId: dj_rest_auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - dj-rest-auth
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/password/change/:
    post:
      operationId: dj_rest_auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/password/reset/:
    post:
      operationId: dj_rest_auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/password/reset/confirm/:
    post:
      operationId: dj_rest_auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/registration/:
    post:
      operationId: dj_rest_auth_registration_create
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /dj-rest-auth/registration/resend-email/:
    post:
      operationId: dj_rest_auth_registration_resend_email_create
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/registration/verify-email/:
    post:
      operationId: dj_rest_auth_registration_verify_email_create
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/user/:
    get:
      operationId: dj_rest_auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    put:
      operationId: dj_rest_auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetails'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    patch:
      operationId: dj_rest_auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
components:
  schemas:
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - password
    PaginatedReplyList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Reply'
    PaginatedRestaurantCommentList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/RestaurantComment'
    PaginatedRestaurantList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Restaurant'
    PaginatedSettlementList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Settlement'
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PatchedReply:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        Title:
          type: string
          maxLength: 80
        Body:
          type: string
        Picture:
          type: string
          format: uri
        Area:
          type: string
          format: uuid
    PatchedRestaurant:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        Name:
          type: string
          maxLength: 120
        Country:
          type: string
          maxLength: 50
        Price:
          type: integer
          maximum: 10000
          minimum: 1
        Rating:
          type: integer
          maximum: 10
          minimum: 1
        People:
          type: integer
          maximum: 50
          minimum: 1
        Address:
          type: string
          maxLength: 120
        Introduction:
          type: string
          nullable: true
        Picture:
          type: string
          format: uri
          nullable: true
    PatchedRestaurantComment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        RestaurantName:
          type: string
          readOnly: true
        Rating:
          type: integer
          maximum: 10
          minimum: 1
        Title:
          type: string
          maxLength: 120
        Body:
          type: string
        user_pk:
          type: integer
        Restaurant:
          type: integer
    PatchedSettlement:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        AreaName:
          type: string
          maxLength: 120
        Address:
          type: string
          maxLength: 120
        PublicTransportation:
          type: string
          maxLength: 120
        Country:
          type: string
          maxLength: 50
        Introduction:
          type: string
        Picture:
          type: string
          format: uri
    PatchedUserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    Register:
      type: object
      properties:
        username:
          type: string
          maxLength: 150
          minLength: 1
        email:
          type: string
          format: email
        password1:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - password1
      - password2
      - username
    Reply:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        Title:
          type: string
          maxLength: 80
        Body:
          type: string
        Picture:
          type: string
          format: uri
        Area:
          type: string
          format: uuid
      required:
      - Area
      - Body
      - Picture
      - Title
      - id
    ResendEmailVerification:
      type: object
      properties:
        email:
          type: string
          format: email
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        Name:
          type: string
          maxLength: 120
        Country:
          type: string
          maxLength: 50
        Price:
          type: integer
          maximum: 10000
          minimum: 1
        Rating:
          type: integer
          maximum: 10
          minimum: 1
        People:
          type: integer
          maximum: 50
          minimum: 1
        Address:
          type: string
          maxLength: 120
        Introduction:
          type: string
          nullable: true
        Picture:
          type: string
          format: uri
          nullable: true
      required:
      - Address
      - Country
      - Name
      - id
    RestaurantComment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        RestaurantName:
          type: string
          readOnly: true
        Rating:
          type: integer
          maximum: 10
          minimum: 1
        Title:
          type: string
          maxLength: 120
        Body:
          type: string
        user_pk:
          type: integer
        Restaurant:
          type: integer
      required:
      - Body
      - Restaurant
      - RestaurantName
      - Title
      - id
      - user_pk
    Settlement:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        AreaName:
          type: string
          maxLength: 120
        Address:
          type: string
          maxLength: 120
        PublicTransportation:
          type: string
          maxLength: 120
        Country:
          type: string
          maxLength: 50
        Introduction:
          type: string
        Picture:
          type: string
          format: uri
      required:
      - Address
      - AreaName
      - Country
      - Introduction
      - Picture
      - PublicTransportation
      - id
    SocialLogin:
      type: object
      properties:
        access_token:
          type: string
        code:
          type: string
        id_token:
          type: string
    Token:
      type: object
      description: Serializer for Token model.
      properties:
        key:
          type: string
          maxLength: 40
      required:
      - key
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    UserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
      - pk
      - username
    VerifyEmail:
      type: object
      properties:
        key:
          type: string
          writeOnly: true
      required:
      - key
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
